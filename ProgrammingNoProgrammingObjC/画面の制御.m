//
//  画面の制御.m
//  できるだけプログラムっぽくないプログラミング
//
//  ロータース123によって2017年7月某日に作られました。
//  著作権: 2017年 ロータース123
//

// 冒頭のインポートは置き換えられない。
#import "画面の制御.h"

インターフェイスここから 画面の制御 ()
特性 (同時に高速に動く, 強い参照) 文字用の部品の雛形 ポインタを使って 文字用の部品;
ここまで

実装ここから 画面の制御

- (何も戻さない関数)画面が読み込まれた後に {
    
    [親クラスの 画面が読み込まれた後に];

    [自クラスの 文字用の部品を作る];
    [自クラスの 文字を書く];

}

- (何も戻さない関数)文字用の部品を作る {
    
    文字用の部品の雛形 *文字用の部品 = [[文字用の部品の雛形 メモリを確保]
                         フレームを指定して初期化: 自クラスの.画面の部品.境界範囲];
    文字用の部品.テキストの整列 = テキスト中央揃え;
    [自クラスの.画面の部品 画面部品を追加: 文字用の部品];
    
    [文字用の部品 従来の自動幅調整機能の利用: いいえ];
    
    // この辺は日本語が利用できなかった。
    辞書 *画面の部品辞書 = @{部品の名前: 文字用の部品};
    
    NSString *hStr = [NSString stringWithFormat: @"H:|[%@]|", 部品の名前];
    NSString *vStr = [NSString stringWithFormat: @"V:|-100-[%@]-100-|", 部品の名前];
    
    [レイアウトの制約 制約を有効化:
     [レイアウトの制約 いわゆるアスキーアート的な記述で制約を: hStr
      オプション群: 0
      幅とかの指標: 空っぽ
      部品群: 画面の部品辞書]];
    
    [レイアウトの制約 制約を有効化:
     [レイアウトの制約 いわゆるアスキーアート的な記述で制約を: vStr
      オプション群: 0
      幅とかの指標: 空っぽ
      部品群: 画面の部品辞書]];
    
    文字用の部品.編集可能 = いいえ;
    文字用の部品.選択可能 = いいえ;

    自クラスの.文字用の部品 = 文字用の部品;

}

- (何も戻さない関数)文字を書く {
    
    // 今回は簡素に。
    自クラスの.文字用の部品.テキスト = @"テスト。テスト。テスト。\n\n　　　〜改行テスト。";
    
}

ここまで
